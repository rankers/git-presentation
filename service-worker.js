"use strict";var precacheConfig=[["/git-presentation/index.html","4e59c0f65758c6ff95a92f0d2aaac796"],["/git-presentation/static/css/main.653da357.css","521def3ae35e5b12d25e0300c45174f2"],["/git-presentation/static/js/main.63c454da.js","88ad4a7bff941206af4189be638f9f98"],["/git-presentation/static/media/01.2667b86c.svg","2667b86c8d229387459b7595de1a76e0"],["/git-presentation/static/media/02.ffb4536f.svg","ffb4536f7728ae28594958aaca9659e3"],["/git-presentation/static/media/03.6480d07d.svg","6480d07dcea3d4a3947bd5bb43c05f49"],["/git-presentation/static/media/04.26ff44e0.svg","26ff44e057316d07d53495b0129fb409"],["/git-presentation/static/media/05.34e0fc34.svg","34e0fc3447edc79347d93a96fec5ecd9"],["/git-presentation/static/media/06.46022edc.svg","46022edc61a0304e4f0056251b1dcd4a"],["/git-presentation/static/media/07.e770c357.svg","e770c35775c0d1d337ff692f836a1fb9"],["/git-presentation/static/media/08.7bc62cbc.svg","7bc62cbcaef7f976b71d7b0d0f482fd9"],["/git-presentation/static/media/09.4b01f54a.svg","4b01f54a87515b1fc9cb164f343f095e"],["/git-presentation/static/media/10.5628bda6.svg","5628bda6d4f9933a33d3f63d8ed6c7ed"],["/git-presentation/static/media/commit-msg.dfe8e610.png","dfe8e610448e19e075f50216d4f28851"],["/git-presentation/static/media/deltas.dd7830f0.png","dd7830f081d24ebbac3e0ec482ae7731"],["/git-presentation/static/media/first-git-commit.d0699a1c.png","d0699a1c979fc582ef8c3322560d68d1"],["/git-presentation/static/media/interactive-rebase-cl.dc5d85c9.png","dc5d85c96b832063e67d3ca4e0b358ef"],["/git-presentation/static/media/interactive-rebase-ui.37c99e8d.png","37c99e8d9d4f264e22611a919064941c"],["/git-presentation/static/media/linus.4dbde3ce.png","4dbde3ced8fd343e1a5b81a3ac39dce6"],["/git-presentation/static/media/merge.a8d162c1.png","a8d162c175526cb94be73fa1ebbe70d5"],["/git-presentation/static/media/rebase-meme.b2b72787.png","b2b72787e2ae0faa2df4bde0221aeef3"],["/git-presentation/static/media/reset-01.da97b12a.png","da97b12a92628e050ea44721cec209e3"],["/git-presentation/static/media/reset-02.784ac086.png","784ac086cde4b3401f6db338efe376f4"],["/git-presentation/static/media/reset-03.7564cc27.png","7564cc275195cb505a8647ebfa1b810e"],["/git-presentation/static/media/reset-04.27a8eabb.png","27a8eabb15fccea82a23b09464292718"],["/git-presentation/static/media/snapshots.e72ac15a.png","e72ac15adb7356b02a12eafc1ef31b46"],["/git-presentation/static/media/staging-directories.8384248b.png","8384248ba1ee1cd713a3c21b08334ea0"],["/git-presentation/static/media/what-is-a-branch.8e1affdc.png","8e1affdc6bb639f6325a5008a5e024da"],["/git-presentation/static/media/what-is-a-commit.73c52237.png","73c522372d9c29adb7ba2fcdd541912a"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,n){var i=new URL(e);return n&&i.pathname.match(n)||(i.search+=(i.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),i.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),i=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),i]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),n="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),t=urlsToCacheKeys.has(a));var i="/git-presentation/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(i,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});